name: Pipeline

on:
  push:
  workflow_dispatch:

jobs:
  UnitTestingParams:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@cov
    with:
      name: sphinx-reports
      python_version_list: "3.9 3.10 3.11 3.12 pypy-3.9 pypy-3.10"
#      disable_list: "windows:pypy-3.8 windows:pypy-3.9 windows:pypy-3.10"

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@cov
    needs:
      - UnitTestingParams
    with:
      jobs: ${{ needs.UnitTestingParams.outputs.python_jobs }}
      requirements: "-r tests/unit/requirements.txt"
      pacboy: "msys/git"
      unittest_xml_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).unittesting_xml }}
      coverage_sqlite_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_sqlite }}

  DocCoverage:
    name: Check documentation coverage
    runs-on: ubuntu-latest
    needs:
      - UnitTestingParams
    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4

      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üîß Install wheel,tomli and pip dependencies (native)
        run: |
          python -m pip install --disable-pip-version-check -U docstr_coverage interrogate
#          python -m pip install --disable-pip-version-check ${{ inputs.requirements }}

      - name: Run 'interrogate' Documentation Coverage Check
        continue-on-error: true
        run: |
          interrogate -c pyproject.toml

      - name: Run 'docstr_coverage' Documentation Coverage Check
        continue-on-error: true
        run: |
          docstr_coverage -v sphinx_reports

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@cov
    needs:
      - UnitTestingParams
      - UnitTesting
    with:
      python_version: ${{ needs.UnitTestingParams.outputs.python_version }}
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).package_all }}

  StaticTypeCheck:
    uses: pyTooling/Actions/.github/workflows/StaticTypeCheck.yml@cov
    needs:
      - UnitTestingParams
    with:
      python_version: ${{ needs.UnitTestingParams.outputs.python_version }}
      commands: |
        mypy --html-report htmlmypy -p sphinx_reports
      html_report: 'htmlmypy'
      html_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).statictyping_html }}

  PublishCoverageResults:
    uses: pyTooling/Actions/.github/workflows/PublishCoverageResults.yml@cov
    needs:
      - UnitTestingParams
      - UnitTesting
    with:
#      coverage_sqlite_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_sqlite }}
#      coverage_xml_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_xml }}
      coverage_json_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_json }}
      coverage_html_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_html }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  PublishTestResults:
    uses: pyTooling/Actions/.github/workflows/PublishTestResults.yml@cov
    needs:
      - UnitTesting

  IntermediateCleanUp:
    name: üóëÔ∏è Intermediate Artifact Cleanup
    runs-on: ubuntu-latest
    needs:
      - UnitTestingParams
      - PublishCoverageResults
      - PublishTestResults
    steps:
      - name: üóëÔ∏è Delete SQLite coverage artifacts from matrix jobs
        uses: geekyeggo/delete-artifact@v4
        continue-on-error: true
        with:
          name: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_sqlite }}-*
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: üóëÔ∏è Delete XML coverage artifacts from matrix jobs
        uses: geekyeggo/delete-artifact@v4
        continue-on-error: true
        with:
          name: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).unittesting_xml }}-*
          token: ${{ secrets.GITHUB_TOKEN }}

#  VerifyDocs:
#    uses: pyTooling/Actions/.github/workflows/VerifyDocs.yml@cov
#    needs:
#      - UnitTestingParams
#    with:
#      python_version: ${{ needs.UnitTestingParams.outputs.python_version }}

  HTMLDocumentation:
    uses: pyTooling/Actions/.github/workflows/SphinxDocumentation.yml@json
    needs:
      - UnitTestingParams
      - PublishCoverageResults
#      - VerifyDocs
    with:
      python_version: ${{ needs.UnitTestingParams.outputs.python_version }}
      coverage_json_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_json }}
      html_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_html }}
      latex_artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_latex }}

  PDFDocumentation:
    name: üìì Converting LaTeX Documentation to PDF
    runs-on: ubuntu-latest
    needs:
      - UnitTestingParams
      - HTMLDocumentation
    steps:
      - name: üì• Download artifacts '${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_latex }}' from 'SphinxDocumentation' job
        uses: actions/download-artifact@v4
        with:
          name: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_latex }}
          path: latex

      - name: Debug
        run: ls -lah . && ls -lah latex

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@master
        continue-on-error: true
        with:
          root_file: latex/sphinx_reports.tex

      - name: üì§ Upload 'PDF Documentation' artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_pdf }}
          path: sphinx_reports.pdf
          if-no-files-found: error
          retention-days: 1

  PublishToGitHubPages:
    uses: pyTooling/Actions/.github/workflows/PublishToGitHubPages.yml@cov
    needs:
      - UnitTestingParams
      - HTMLDocumentation
#      - PDFDocumentation
      - PublishCoverageResults
      - StaticTypeCheck
    with:
      doc: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_html }}
#      coverage: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_html }}
      typing: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).statictyping_html }}

  ReleasePage:
    uses: pyTooling/Actions/.github/workflows/Release.yml@cov
    if: startsWith(github.ref, 'refs/tags')
    needs:
#      - StaticTypeCheck
      - Package
      - PublishToGitHubPages

  PublishOnPyPI:
    uses: pyTooling/Actions/.github/workflows/PublishOnPyPI.yml@cov
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTestingParams
      - ReleasePage
    with:
      python_version: ${{ needs.UnitTestingParams.outputs.python_version }}
      requirements: -r dist/requirements.txt
      artifact: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).package_all }}
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  ArtifactCleanUp:
    uses: pyTooling/Actions/.github/workflows/ArtifactCleanUp.yml@cov
    needs:
      - UnitTestingParams
      - UnitTesting
      - HTMLDocumentation
      - PDFDocumentation
      - StaticTypeCheck
      - PublishTestResults
      - PublishCoverageResults
      - PublishToGitHubPages
      - PublishOnPyPI
    with:
      package: ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).package_all }}
      remaining: |
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).unittesting_xml }}-*
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).unittesting_html }}-*
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_sqlite }}-*
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_xml }}-*
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_json }}-*
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_html }}-*
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).unittesting_xml }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).unittesting_html }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_sqlite }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_xml }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_json }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).codecoverage_html }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).statictyping_html }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_html }}
        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_latex }}
#        ${{ fromJson(needs.UnitTestingParams.outputs.artifact_names).documentation_pdf }}
