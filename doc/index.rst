.. include:: shields.inc

.. raw:: latex

   \part{Introduction}

.. only:: html

   |  |SHIELD:svg:SphinxReports-github| |SHIELD:svg:SphinxReports-src-license| |SHIELD:svg:SphinxReports-ghp-doc| |SHIELD:svg:SphinxReports-doc-license|
   |  |SHIELD:svg:SphinxReports-pypi-tag| |SHIELD:svg:SphinxReports-pypi-status| |SHIELD:svg:SphinxReports-pypi-python|
   |  |SHIELD:svg:SphinxReports-gha-test| |SHIELD:svg:SphinxReports-lib-status| |SHIELD:svg:SphinxReports-codacy-quality| |SHIELD:svg:SphinxReports-codacy-coverage| |SHIELD:svg:SphinxReports-codecov-coverage|

.. Disabled shields: |SHIELD:svg:SphinxReports-gitter| |SHIELD:svg:SphinxReports-lib-dep| |SHIELD:svg:SphinxReports-lib-rank|

.. only:: latex

   |SHIELD:png:SphinxReports-github| |SHIELD:png:SphinxReports-src-license| |SHIELD:png:SphinxReports-ghp-doc| |SHIELD:png:SphinxReports-doc-license|
   |SHIELD:png:SphinxReports-pypi-tag| |SHIELD:png:SphinxReports-pypi-status| |SHIELD:png:SphinxReports-pypi-python|
   |SHIELD:png:SphinxReports-gha-test| |SHIELD:png:SphinxReports-lib-status| |SHIELD:png:SphinxReports-codacy-quality| |SHIELD:png:SphinxReports-codacy-coverage| |SHIELD:png:SphinxReports-codecov-coverage|

.. Disabled shields: |SHIELD:svg:SphinxReports-gitter| |SHIELD:png:SphinxReports-lib-dep| |SHIELD:png:SphinxReports-lib-rank|

--------------------------------------------------------------------------------

sphinx-reports Documentation
############################

The Sphinx extension `sphinx_reports` offers a set of directives to integrate reports and summaries into the
documentation generated by Sphinx.


Supported Report Formats
************************

Supported format reports are:

* ‚úÖüöß Unit Test summaries (by `pytest <https://github.com/pytest-dev/pytest>`__)

  * ‚úÖ Summary page (displaying ``unittest.xml``)
  * üöß Show logging, output and error messages.

* üöß Code coverage (by `Coverage.py <https://github.com/nedbat/coveragepy/tree/master>`__)

  * ‚úÖ Summary page (displaying ``coverage.json``)
  * üöß Individual Sphinx documents per package/module
  * üöß Highlighted source code with syntax highlighting and coverage highlighting

* üöß Documentation coverage

  * ‚úÖ Summary page (displaying data from `"""docstr_coverage""" <https://github.com/HunterMcGushion/docstr_coverage>`__)
  * ‚ùì Additionally support `interrogate <https://github.com/econchick/interrogate>`__ as data source.
  * üöß Individual Sphinx documents per package/module
  * üöß Highlighted source code with syntax highlighting and coverage highlighting

* üöß Dependencies

  * üöß Summary page (displaying ``requirements.txt``)


Unit Test Summary
=================

.. grid:: 2

   .. grid-item::
      :columns: 6

      üöß This is a work-in-progress feature. üöß

      :ref:`UNITTEST`

      .. rubric:: Configuration Options

      * Handle multiple unittest report files per Sphinx documentation.
      * Overwrite testsuite summary name (toplevel report name).
      * Show all testcases or not passing testcases.
      * Hide assertions
      * Hide summary row
      * Separate legend directive to list color pallet.

      .. rubric:: Styling via CSS

      * Add user-defined CSS classes
      * Predefined color pallet or user defined percentages and CSS class names

      .. rubric:: Planned features

      * Display testsuite details on standalone documents (separate HTML page)

   .. grid-item::
      :columns: 6

      .. image:: _static/Unittest.png


Code Coverage
=============

.. grid:: 2

   .. grid-item::
      :columns: 6

      :ref:`CODECOV` checks if a source code was used during execution. Usually, testcases are run by a testcase
      execution framework like `pytest <https://github.com/pytest-dev/pytest>`__, which also offers to instrument the
      code for code coverage collection using the ``pytest-cov`` plugin. For Python, coverage collection is usually
      based on `Coverage.py <https://github.com/nedbat/coveragepy>`__, which supports statement and branch coverage
      collection.

      .. rubric:: Configuration Options

      * Handle multiple code coverage report files per Sphinx documentation.
      * Show branch coverage if available.
      * Separate legend directive to list color pallet.

      .. rubric:: Styling via CSS

      * Add user-defined CSS classes
      * Predefined color pallet or user defined percentages and CSS class names

      .. rubric:: Planned features

      * Display package and module coverage on standalone documents (separate HTML page)
      * Visualize code coverage using syntax highlightling and background colors.

   .. grid-item::
      :columns: 6

      .. image:: _static/CodeCoverage.png


Documentation coverage
======================

.. grid:: 2

   .. grid-item::
      :columns: 6

      :ref:`DOCCOV` counts how many publicly accessible members are documented using a Python :term:`doc-string`. Based
      on the count of possibly documented public members and the actual number of non-empty *doc-strings*, a percentage
      of documentation coverage can be computed.

      .. rubric:: Configuration Options

      * Handle multiple documentation coverage reports per Sphinx documentation.
      * Separate legend directive to list color pallet.

      .. rubric:: Styling via CSS

      * Add user-defined CSS classes
      * Predefined color pallet or user defined percentages and CSS class names

      .. rubric:: Planned features

      * Display documentation coverage on standalone documents (separate HTML page)
      * Visualize documentation coverage using syntax highlightling and background colors.

   .. grid-item::
      :columns: 6

      .. image:: _static/DocCoverage.png

Dependencies
============

üöß This is a planned feature. üöß


.. _CONTRIBUTORS:

Contributors
************

* `Patrick Lehmann <https://GitHub.com/Paebbels>`__ (Maintainer)
* `and more... <https://GitHub.com/pyTooling/sphinx-reports/graphs/contributors>`__


.. _LICENSE:

License
*******

.. only:: html

   This Python package (source code) is licensed under `Apache License 2.0 <Code-License.html>`__. |br|
   The accompanying documentation is licensed under `Creative Commons - Attribution 4.0 (CC-BY 4.0) <Doc-License.html>`__.

.. only:: latex

   This Python package (source code) is licensed under **Apache License 2.0**. |br|
   The accompanying documentation is licensed under **Creative Commons - Attribution 4.0 (CC-BY 4.0)**.


.. toctree::
   :caption: Overview
   :hidden:

   Installation
   Dependency

.. raw:: latex

   \part{Main Documentation}

.. toctree::
   :caption: Examples
   :hidden:

   Examples/Documentation
   Examples/Dependency
   Examples/JUnit-Basic
   Examples/JUnit-Complete
   Examples/OSVVM

.. toctree::
   :caption: Supported Reports
   :hidden:

   Overview
   Unittest/index
   CodeCov/index
   DocCov/index

.. raw:: latex

   \part{References and Reports}

.. toctree::
   :caption: References and Reports
   :hidden:

   Python Class Reference <sphinx_reports/sphinx_reports>
   unittests/index
   coverage/index
   CodeCoverage
   Doc. Coverage Report <DocCoverage>
   Static Type Check Report ‚ûö <typing/index>

.. raw:: latex

   \part{Appendix}

.. toctree::
   :caption: Appendix
   :hidden:

   License
   Doc-License
   Glossary
   genindex
   Python Module Index <modindex>
   TODO
